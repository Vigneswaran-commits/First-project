Version 3.2 HI-TECH Software Intermediate Code
"388 C:\Program Files\HI-TECH Software\PICC-18\9.80\lib\doprnt.c
[v __npowers_ `Cd ~T0 -> 0 `x e ]
[v __powers_ `Cd ~T0 -> 0 `x e ]
"34 C:\Program Files\HI-TECH Software\PICC-18\9.80\include\stdarg.h
[v ___va_start `(*v ~T0 0 ef ]
[p i ___va_start ]
"37
[v ___va_arg `(*v ~T0 0 ev`*v ]
[p i ___va_arg ]
"394 C:\Program Files\HI-TECH Software\PICC-18\9.80\lib\doprnt.c
[v __tdiv_to_l_ `(ul ~T0 0 ef2`f`f ]
"392
[v __div_to_l_ `(ul ~T0 0 ef2`d`d ]
[; ;stdio.h: 12: typedef int ptrdiff_t;
[; ;stdio.h: 13: typedef unsigned size_t;
[; ;stdio.h: 14: typedef unsigned short wchar_t;
[; ;stdarg.h: 31: typedef void * va_list[1];
[; ;stdarg.h: 34: extern void * __va_start(void);
[; ;stdarg.h: 37: extern void * __va_arg(void *, ...);
[; ;stdio.h: 27: extern int errno;
[; ;stdio.h: 58: struct __prbuf
[; ;stdio.h: 59: {
[; ;stdio.h: 60: char * ptr;
[; ;stdio.h: 61: void (* func)(char);
[; ;stdio.h: 62: };
[; ;conio.h: 17: extern int errno;
[; ;conio.h: 20: extern void init_uart(void);
[; ;conio.h: 22: extern char getch(void);
[; ;conio.h: 23: extern char getche(void);
[; ;conio.h: 24: extern void putch(char);
[; ;conio.h: 25: extern void ungetch(char);
[; ;conio.h: 27: extern bit kbhit(void);
[; ;conio.h: 31: extern char * cgets(char *);
[; ;conio.h: 32: extern void cputs(const char *);
[; ;stdio.h: 103: extern int cprintf(char *, ...);
[; ;stdio.h: 108: extern int _doprnt(struct __prbuf *, const register char *, register va_list);
[; ;stdio.h: 195: extern char * gets(char *);
[; ;stdio.h: 196: extern int puts(const char *);
[; ;stdio.h: 197: extern int scanf(const char *, ...);
[; ;stdio.h: 198: extern int sscanf(const char *, const char *, ...);
[; ;stdio.h: 199: extern int vprintf(const char *, va_list);
[; ;stdio.h: 200: extern int vsprintf(char *, const char *, va_list);
[; ;stdio.h: 201: extern int vscanf(const char *, va_list ap);
[; ;stdio.h: 202: extern int vsscanf(const char *, const char *, va_list);
[; ;stdio.h: 206: extern int sprintf(char *, const char *, ...);
[; ;stdio.h: 207: extern int printf(const char *, ...);
[; ;ctype.h: 5: extern bit isalpha(char);
[; ;ctype.h: 6: extern bit isupper(char);
[; ;ctype.h: 7: extern bit islower(char);
[; ;ctype.h: 8: extern bit isdigit(char);
[; ;ctype.h: 9: extern bit isxdigit(char);
[; ;ctype.h: 10: extern bit isspace(char);
[; ;ctype.h: 11: extern bit ispunct(char);
[; ;ctype.h: 12: extern bit isalnum(char);
[; ;ctype.h: 13: extern bit isprint(char);
[; ;ctype.h: 14: extern bit isgraph(char);
[; ;ctype.h: 15: extern bit iscntrl(char);
[; ;ctype.h: 18: extern char toupper(char);
[; ;ctype.h: 19: extern char tolower(char);
[; ;stdlib.h: 27: typedef struct {
[; ;stdlib.h: 28: int rem;
[; ;stdlib.h: 29: int quot;
[; ;stdlib.h: 30: } div_t;
[; ;stdlib.h: 31: typedef struct {
[; ;stdlib.h: 32: unsigned rem;
[; ;stdlib.h: 33: unsigned quot;
[; ;stdlib.h: 34: } udiv_t;
[; ;stdlib.h: 35: typedef struct {
[; ;stdlib.h: 36: long quot;
[; ;stdlib.h: 37: long rem;
[; ;stdlib.h: 38: } ldiv_t;
[; ;stdlib.h: 39: typedef struct {
[; ;stdlib.h: 40: unsigned long quot;
[; ;stdlib.h: 41: unsigned long rem;
[; ;stdlib.h: 42: } uldiv_t;
[; ;stdlib.h: 65: extern double atof(const char *);
[; ;stdlib.h: 66: extern double strtod(const char *, const char **);
[; ;stdlib.h: 67: extern int atoi(const char *);
[; ;stdlib.h: 68: extern unsigned xtoi(const char *);
[; ;stdlib.h: 69: extern long atol(const char *);
[; ;stdlib.h: 70: extern long strtol(const char *, char **, int);
[; ;stdlib.h: 72: extern int rand(void);
[; ;stdlib.h: 73: extern void srand(unsigned int);
[; ;stdlib.h: 74: extern void * calloc(size_t, size_t);
[; ;stdlib.h: 75: extern div_t div(int numer, int denom);
[; ;stdlib.h: 76: extern udiv_t udiv(unsigned numer, unsigned denom);
[; ;stdlib.h: 77: extern ldiv_t ldiv(long numer, long denom);
[; ;stdlib.h: 78: extern uldiv_t uldiv(unsigned long numer,unsigned long denom);
[; ;stdlib.h: 79: extern unsigned long _lrotl(unsigned long value, unsigned int shift);
[; ;stdlib.h: 80: extern unsigned long _lrotr(unsigned long value, unsigned int shift);
[; ;stdlib.h: 81: extern unsigned int _rotl(unsigned int value, unsigned int shift);
[; ;stdlib.h: 82: extern unsigned int _rotr(unsigned int value, unsigned int shift);
[; ;stdlib.h: 106: extern void * malloc(size_t);
[; ;stdlib.h: 107: extern void free(void *);
[; ;stdlib.h: 108: extern void * realloc(void *, size_t);
[; ;stdlib.h: 122: extern void abort(void);
[; ;stdlib.h: 123: extern void exit(int);
[; ;stdlib.h: 124: extern int atexit(void (*)(void));
[; ;stdlib.h: 125: extern char * getenv(const char *);
[; ;stdlib.h: 126: extern char ** environ;
[; ;stdlib.h: 127: extern int system(char *);
[; ;stdlib.h: 128: extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
[; ;stdlib.h: 129: extern void * bsearch(const void *, void *, size_t, size_t, int(*)(const void *, const void *));
[; ;stdlib.h: 130: extern int abs(int);
[; ;stdlib.h: 131: extern long labs(long);
[; ;stdlib.h: 145: extern char * itoa(char * buf, int val, int base);
[; ;stdlib.h: 146: extern char * utoa(char * buf, unsigned val, int base);
[; ;stdlib.h: 151: extern char * ltoa(char * buf, long val, int base);
[; ;stdlib.h: 152: extern char * ultoa(char * buf, unsigned long val, int base);
[; ;stdlib.h: 154: extern char * ftoa(float f, int * status);
[; ;string.h: 22: extern void * memcpy(void *, const void *, size_t);
[; ;string.h: 23: extern void * memmove(void *, const void *, size_t);
[; ;string.h: 24: extern void * memset(void *, int, size_t);
[; ;string.h: 35: extern char * strcat(char *, const char *);
[; ;string.h: 36: extern char * strcpy(char *, const char *);
[; ;string.h: 37: extern char * strncat(char *, const char *, size_t);
[; ;string.h: 38: extern char * strncpy(char *, const char *, size_t);
[; ;string.h: 39: extern char * strdup(const char *);
[; ;string.h: 40: extern char * strtok(char *, const char *);
[; ;string.h: 43: extern int memcmp(const void *, const void *, size_t);
[; ;string.h: 44: extern int strcmp(const char *, const char *);
[; ;string.h: 45: extern int stricmp(const char *, const char *);
[; ;string.h: 46: extern int strncmp(const char *, const char *, size_t);
[; ;string.h: 47: extern int strnicmp(const char *, const char *, size_t);
[; ;string.h: 48: extern void * memchr(const void *, int, size_t);
[; ;string.h: 49: extern size_t strcspn(const char *, const char *);
[; ;string.h: 50: extern char * strpbrk(const char *, const char *);
[; ;string.h: 51: extern size_t strspn(const char *, const char *);
[; ;string.h: 52: extern char * strstr(const char *, const char *);
[; ;string.h: 53: extern char * stristr(const char *, const char *);
[; ;string.h: 54: extern char * strerror(int);
[; ;string.h: 55: extern size_t strlen(const char *);
[; ;string.h: 56: extern char * strchr(const char *, int);
[; ;string.h: 57: extern char * strichr(const char *, int);
[; ;string.h: 58: extern char * strrchr(const char *, int);
[; ;string.h: 59: extern char * strrichr(const char *, int);
[; ;conio.h: 17: extern int errno;
[; ;conio.h: 20: extern void init_uart(void);
[; ;conio.h: 22: extern char getch(void);
[; ;conio.h: 23: extern char getche(void);
[; ;conio.h: 24: extern void putch(char);
[; ;conio.h: 25: extern void ungetch(char);
[; ;conio.h: 27: extern bit kbhit(void);
[; ;conio.h: 31: extern char * cgets(char *);
[; ;conio.h: 32: extern void cputs(const char *);
[; ;sys.h: 17: extern int errno;
[; ;sys.h: 30: extern int execl(char *, char *, ...);
[; ;sys.h: 31: extern int execv(char *, char **);
[; ;sys.h: 32: extern int execve(char *, char **, char **);
[; ;sys.h: 33: extern int execle(char *, char *, ...);
[; ;sys.h: 34: extern int execvp(char *, char **);
[; ;sys.h: 35: extern int execlp(char *, char *, ...);
[; ;sys.h: 36: extern int getpid(void);
[; ;sys.h: 37: extern char * mktemp(char *);
[; ;sys.h: 51: extern int spawnl(char *, char *, ...);
[; ;sys.h: 52: extern int spawnv(char *, char **);
[; ;sys.h: 53: extern int spawnle(char *, char *, ...);
[; ;sys.h: 54: extern int spawnve(char *, char **, char **);
[; ;sys.h: 55: extern int spawnlp(char *, char *, ...);
[; ;sys.h: 56: extern int spawnvp(char *, char **);
[; ;sys.h: 58: extern int chdir(char *);
[; ;sys.h: 59: extern int chdrv(char *);
[; ;sys.h: 60: extern int mkdir(char *);
[; ;sys.h: 61: extern int rmdir(char *);
[; ;sys.h: 62: extern char * getcwd(char *);
[; ;sys.h: 63: extern void persist_validate(void);
[; ;sys.h: 64: extern int persist_check(int);
[; ;sys.h: 65: extern char * getdrv(void);
[; ;sys.h: 66: extern char ** _getargs(char *, char *);
[; ;sys.h: 67: extern int _argc_;
[; ;sys.h: 78: extern void * sbrk(size_t);
[; ;sys.h: 79: extern void brk(void *);
[; ;sys.h: 85: extern int _pnum(unsigned long, signed char, signed char, unsigned char, unsigned char, struct __prbuf *, unsigned char);
[; ;sys.h: 86: extern int _fnum(double, short, short, short, struct __prbuf *, short);
[; ;math.h: 3: extern double fabs(double);
[; ;math.h: 4: extern double floor(double);
[; ;math.h: 5: extern double ceil(double);
[; ;math.h: 6: extern double modf(double, double *);
[; ;math.h: 7: extern double sqrt(double);
[; ;math.h: 8: extern double atof(const char *);
[; ;math.h: 9: extern double sin(double);
[; ;math.h: 10: extern double cos(double);
[; ;math.h: 11: extern double tan(double);
[; ;math.h: 12: extern double asin(double);
[; ;math.h: 13: extern double acos(double);
[; ;math.h: 14: extern double atan(double);
[; ;math.h: 15: extern double atan2(double, double);
[; ;math.h: 16: extern double log(double);
[; ;math.h: 17: extern double log10(double);
[; ;math.h: 18: extern double pow(double, double);
[; ;math.h: 19: extern double exp(double);
[; ;math.h: 20: extern double sinh(double);
[; ;math.h: 21: extern double cosh(double);
[; ;math.h: 22: extern double tanh(double);
[; ;math.h: 23: extern double eval_poly(double, const double *, int);
[; ;math.h: 24: extern double frexp(double, int *);
[; ;math.h: 25: extern double ldexp(double, int);
[; ;math.h: 26: extern double fmod(double, double);
[; ;math.h: 27: extern double trunc(double);
[; ;math.h: 28: extern double round(double);
"13 C:\Program Files\HI-TECH Software\PICC-18\9.80\lib\doprnt.c
[p n 350 ]
"354
[v _dpowers `Cul ~T0 -> 0 `x s ]
[i _dpowers
:U ..
-> -> -> 1 `i `l `ul
-> -> -> 10 `i `l `ul
-> -> -> 100 `i `l `ul
-> -> -> 1000 `i `l `ul
-> -> -> 10000 `i `l `ul
"356
-> -> 100000 `l `ul
-> -> 1000000 `l `ul
-> -> 10000000 `l `ul
-> -> 100000000 `l `ul
"359
-> -> 1000000000 `l `ul
..
]
[; ;doprnt.c: 354: const static unsigned long dpowers[] = {1, 10, 100, 1000, 10000,
[; ;doprnt.c: 356: 100000, 1000000, 10000000, 100000000,
[; ;doprnt.c: 357: 1000000000
[; ;doprnt.c: 359: };
[; ;doprnt.c: 388: extern const double _powers_[], _npowers_[];
[; ;doprnt.c: 392: extern unsigned long _div_to_l_(double, double);
[; ;doprnt.c: 394: extern unsigned long _tdiv_to_l_(float, float);
"410
[v _fround `(d ~T0 1 sf1`uc ]
{
[; ;doprnt.c: 408: static double
[; ;doprnt.c: 409: fround(unsigned char prec)
[; ;doprnt.c: 410: {
[e :U _fround ]
[v _prec `uc ~T0 1 r1 ]
[f ]
[; ;doprnt.c: 413: if(prec>=110)
"413
[e $ ! >= -> _prec `i -> 110 `i 7  ]
[; ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npowers_[prec%10];
"414
[e ) * * * .0.5 *U + &U __npowers_ * -> -> + / -> _prec `i -> 100 `i -> 18 `i `ui `ux -> -> # *U &U __npowers_ `ui `ux *U + &U __npowers_ * -> -> + / % -> _prec `i -> 100 `i -> 10 `i -> 9 `i `ui `ux -> -> # *U &U __npowers_ `ui `ux *U + &U __npowers_ * -> -> % -> _prec `i -> 10 `i `ui `ux -> -> # *U &U __npowers_ `ui `ux ]
[e $UE 6  ]
[e $U 8  ]
"415
[e :U 7 ]
[; ;doprnt.c: 415: else if(prec > 10)
[e $ ! > -> _prec `i -> 10 `i 9  ]
[; ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
"416
[e ) * * .0.5 *U + &U __npowers_ * -> -> + / -> _prec `i -> 10 `i -> 9 `i `ui `ux -> -> # *U &U __npowers_ `ui `ux *U + &U __npowers_ * -> -> % -> _prec `i -> 10 `i `ui `ux -> -> # *U &U __npowers_ `ui `ux ]
[e $UE 6  ]
[e :U 9 ]
"417
[e :U 8 ]
[; ;doprnt.c: 417: return 0.5 * _npowers_[prec];
[e ) * .0.5 *U + &U __npowers_ * -> _prec `ux -> -> # *U &U __npowers_ `ui `ux ]
[e $UE 6  ]
[; ;doprnt.c: 418: }
"418
[e :UE 6 ]
}
"426
[v _scale `(d ~T0 1 sf1`c ]
{
[; ;doprnt.c: 424: static double
[; ;doprnt.c: 425: scale(signed char scl)
[; ;doprnt.c: 426: {
[e :U _scale ]
[v _scl `c ~T0 1 r1 ]
[f ]
[; ;doprnt.c: 428: if(scl < 0) {
"428
[e $ ! < -> _scl `i -> 0 `i 11  ]
{
[; ;doprnt.c: 429: scl = -scl;
"429
[e = _scl -> -U -> _scl `i `c ]
[; ;doprnt.c: 430: if(scl>=110)
"430
[e $ ! >= -> _scl `i -> 110 `i 12  ]
[; ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl%10];
"431
[e ) * * *U + &U __npowers_ * -> -> + / -> _scl `i -> 100 `i -> 18 `i `ui `ux -> -> # *U &U __npowers_ `ui `ux *U + &U __npowers_ * -> -> + / % -> _scl `i -> 100 `i -> 10 `i -> 9 `i `ui `ux -> -> # *U &U __npowers_ `ui `ux *U + &U __npowers_ * -> -> % -> _scl `i -> 10 `i `ui `ux -> -> # *U &U __npowers_ `ui `ux ]
[e $UE 10  ]
[e $U 13  ]
"432
[e :U 12 ]
[; ;doprnt.c: 432: else if(scl > 10)
[e $ ! > -> _scl `i -> 10 `i 14  ]
[; ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
"433
[e ) * *U + &U __npowers_ * -> -> + / -> _scl `i -> 10 `i -> 9 `i `ui `ux -> -> # *U &U __npowers_ `ui `ux *U + &U __npowers_ * -> -> % -> _scl `i -> 10 `i `ui `ux -> -> # *U &U __npowers_ `ui `ux ]
[e $UE 10  ]
[e :U 14 ]
"434
[e :U 13 ]
[; ;doprnt.c: 434: return _npowers_[scl];
[e ) *U + &U __npowers_ * -> -> _scl `uc `ux -> -> # *U &U __npowers_ `ui `ux ]
[e $UE 10  ]
"435
}
[e :U 11 ]
[; ;doprnt.c: 435: }
[; ;doprnt.c: 436: if(scl>=110)
"436
[e $ ! >= -> _scl `i -> 110 `i 15  ]
[; ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10];
"437
[e ) * * *U + &U __powers_ * -> -> + / -> _scl `i -> 100 `i -> 18 `i `ui `ux -> -> # *U &U __powers_ `ui `ux *U + &U __powers_ * -> -> + / % -> _scl `i -> 100 `i -> 10 `i -> 9 `i `ui `ux -> -> # *U &U __powers_ `ui `ux *U + &U __powers_ * -> -> % -> _scl `i -> 10 `i `ui `ux -> -> # *U &U __powers_ `ui `ux ]
[e $UE 10  ]
[e $U 16  ]
"438
[e :U 15 ]
[; ;doprnt.c: 438: else if(scl > 10)
[e $ ! > -> _scl `i -> 10 `i 17  ]
[; ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
"439
[e ) * *U + &U __powers_ * -> -> + / -> _scl `i -> 10 `i -> 9 `i `ui `ux -> -> # *U &U __powers_ `ui `ux *U + &U __powers_ * -> -> % -> _scl `i -> 10 `i `ui `ux -> -> # *U &U __powers_ `ui `ux ]
[e $UE 10  ]
[e :U 17 ]
"440
[e :U 16 ]
[; ;doprnt.c: 440: return _powers_[scl];
[e ) *U + &U __powers_ * -> -> _scl `uc `ux -> -> # *U &U __powers_ `ui `ux ]
[e $UE 10  ]
[; ;doprnt.c: 441: }
"441
[e :UE 10 ]
}
"492
[v _sprintf `(i ~T0 1 e1v`*uc`*Cuc ]
{
[; ;doprnt.c: 455: int
[; ;doprnt.c: 491: sprintf(char * sp, const char * f, ...)
[; ;doprnt.c: 492: {
[e :U _sprintf ]
[v _sp `*uc ~T0 1 r1 ]
[v _f `*Cuc ~T0 1 r0 ]
[f ]
"493
[v _ap `*v ~T0 -> -> 1 `i `ux a ]
"498
[v _c `c ~T0 1 a ]
"500
[v _width `i ~T0 1 a ]
"503
[v _prec `i ~T0 1 a ]
"507
[v _flag `us ~T0 1 a ]
"514
[v _d `uc ~T0 1 a ]
"515
[v _fval `d ~T0 1 a ]
[v _integ `d ~T0 1 a ]
"516
[v _exp `i ~T0 1 a ]
"517
[v _ival `d ~T0 1 a ]
"524
[s S19 `*Cuc 1 `ui 1 ]
[n S19 . _cp _len ]
[u S18 `ul 1 `S19 1 ]
[n S18 . _val _str ]
[v __val `S18 ~T0 1 a ]
[; ;doprnt.c: 493: va_list ap;
[; ;doprnt.c: 498: signed char c;
[; ;doprnt.c: 500: int width;
[; ;doprnt.c: 503: int prec;
[; ;doprnt.c: 507: unsigned short flag;
[; ;doprnt.c: 514: char d;
[; ;doprnt.c: 515: double fval, integ;
[; ;doprnt.c: 516: int exp;
[; ;doprnt.c: 517: double ival;
[; ;doprnt.c: 518: union {
[; ;doprnt.c: 519: unsigned long _val;
[; ;doprnt.c: 520: struct {
[; ;doprnt.c: 521: const char * _cp;
[; ;doprnt.c: 522: unsigned _len;
[; ;doprnt.c: 523: } _str;
[; ;doprnt.c: 524: } _val;
[; ;doprnt.c: 541: *ap = __va_start();
"541
[e = *U &U _ap ( ___va_start ..  ]
[; ;doprnt.c: 544: while(c = *f++) {
"544
[e $U 21  ]
[e :U 22 ]
{
[; ;doprnt.c: 546: if(c != '%')
"546
[e $ ! != -> -> _c `i `ui -> 37 `ui 24  ]
[; ;doprnt.c: 548: {
"548
{
[; ;doprnt.c: 549: ((*sp++ = (c)));
"549
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> _c `uc ]
[; ;doprnt.c: 550: continue;
"550
[e $U 21  ]
"551
}
[e :U 24 ]
[; ;doprnt.c: 551: }
[; ;doprnt.c: 556: flag = 0;
"556
[e = _flag -> -> 0 `i `us ]
[; ;doprnt.c: 642: switch(c = *f++) {
"642
[e $U 26  ]
{
[; ;doprnt.c: 644: case 0:
"644
[e :U 27 ]
[; ;doprnt.c: 645: goto alldone;
"645
[e $U 28  ]
[; ;doprnt.c: 669: case 'f':
"669
[e :U 29 ]
[; ;doprnt.c: 670: flag |= 0x400;
"670
[e =| _flag -> -> 1024 `i `us ]
[; ;doprnt.c: 671: break;
"671
[e $U 25  ]
[; ;doprnt.c: 704: case 'd':
"704
[e :U 30 ]
"705
[e :U 31 ]
[; ;doprnt.c: 705: case 'i':
[; ;doprnt.c: 706: break;
"706
[e $U 25  ]
[; ;doprnt.c: 809: default:
"809
[e :U 32 ]
[; ;doprnt.c: 820: continue;
"820
[e $U 21  ]
"829
}
[; ;doprnt.c: 829: }
[e $U 25  ]
"642
[e :U 26 ]
[e [\ = _c -> *U ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x `c , $ -> -> 0 `i `c 27
 , $ -> -> 102 `ui `c 29
 , $ -> -> 100 `ui `c 30
 , $ -> -> 105 `ui `c 31
 32 ]
"829
[e :U 25 ]
[; ;doprnt.c: 832: if(flag & (0x700)) {
"832
[e $ ! != & -> _flag `ui -> -> 1792 `i `ui -> -> 0 `i `ui 33  ]
{
[; ;doprnt.c: 836: prec = 6;
"836
[e = _prec -> 6 `i ]
[; ;doprnt.c: 837: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
"837
[e = _fval *U -> ( ___va_arg , (. -> *U -> &U _ap `**d `*v -> -> 0 `i `d `*d ]
[; ;doprnt.c: 838: if(fval < 0.0) {
"838
[e $ ! < _fval .0.0 34  ]
{
[; ;doprnt.c: 839: fval = -fval;
"839
[e = _fval -U _fval ]
[; ;doprnt.c: 840: flag |= 0x03;
"840
[e =| _flag -> -> 3 `i `us ]
"841
}
[e :U 34 ]
[; ;doprnt.c: 841: }
[; ;doprnt.c: 842: exp = 0;
"842
[e = _exp -> 0 `i ]
[; ;doprnt.c: 843: if( fval!=0) {
"843
[e $ ! != _fval -> -> 0 `i `d 35  ]
{
[; ;doprnt.c: 844: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
"844
[e = *U &U _exp -> - & >> *U -> &U _fval `*ul -> 15 `i -> -> -> 255 `i `l `ul -> -> -> 126 `i `l `ul `i ]
[; ;doprnt.c: 845: exp--;
"845
[e -- _exp -> 1 `i ]
[; ;doprnt.c: 846: exp *= 3;
"846
[e =* _exp -> 3 `i ]
[; ;doprnt.c: 847: exp /= 10;
"847
[e =/ _exp -> -> 10 `uc `i ]
[; ;doprnt.c: 848: if(exp < 0)
"848
[e $ ! < _exp -> 0 `i 36  ]
[; ;doprnt.c: 849: exp--;
"849
[e -- _exp -> 1 `i ]
[e :U 36 ]
[; ;doprnt.c: 853: integ = scale(-exp);
"853
[e = _integ ( _scale (1 -> -U _exp `c ]
[; ;doprnt.c: 854: integ *= fval;
"854
[e =* _integ _fval ]
[; ;doprnt.c: 855: if(integ < 1.0)
"855
[e $ ! < _integ .1.0 37  ]
[; ;doprnt.c: 856: exp--;
"856
[e -- _exp -> 1 `i ]
[e $U 38  ]
"857
[e :U 37 ]
[; ;doprnt.c: 857: else if(integ >= 10.0)
[e $ ! >= _integ .10.0 39  ]
[; ;doprnt.c: 858: exp++;
"858
[e ++ _exp -> 1 `i ]
[e :U 39 ]
"859
[e :U 38 ]
}
[e :U 35 ]
[; ;doprnt.c: 859: }
[; ;doprnt.c: 1119: if(prec <= 12)
"1119
[e $ ! <= _prec -> 12 `i 40  ]
[; ;doprnt.c: 1120: fval += fround(prec);
"1120
[e =+ _fval ( _fround (1 -> _prec `uc ]
[e :U 40 ]
[; ;doprnt.c: 1123: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
"1123
[e $ ! || > _exp -> 9 `i && && != _fval -> -> 0 `i `d == -> _fval `ul -> -> -> 0 `i `l `ul > _exp -> 1 `i 41  ]
{
[; ;doprnt.c: 1127: if(integ < 4.294967296){
"1127
[e $ ! < _integ .4.294967296 42  ]
{
[; ;doprnt.c: 1128: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
"1128
[e =- _exp -> - / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui -> -> 1 `i `ui `i ]
"1129
}
[; ;doprnt.c: 1129: }else{
[e $U 43  ]
[e :U 42 ]
{
[; ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
"1130
[e =- _exp -> - / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui -> -> 2 `i `ui `i ]
"1131
}
[e :U 43 ]
[; ;doprnt.c: 1131: }
[; ;doprnt.c: 1132: integ = scale(exp);
"1132
[e = _integ ( _scale (1 -> _exp `c ]
[; ;doprnt.c: 1133: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l_(fval,integ));
"1133
[e = . __val 0 ? == -> # `d `ui -> -> 3 `i `ui : ( __tdiv_to_l_ (2 , -> _fval `f -> _integ `f ( __div_to_l_ (2 , _fval _integ ]
[; ;doprnt.c: 1136: fval = 0.0;
"1136
[e = _fval .0.0 ]
"1137
}
[; ;doprnt.c: 1137: } else {
[e $U 44  ]
[e :U 41 ]
{
[; ;doprnt.c: 1138: _val._val = (unsigned long)fval;
"1138
[e = . __val 0 -> _fval `ul ]
[; ;doprnt.c: 1139: fval -= (double)_val._val;
"1139
[e =- _fval -> . __val 0 `d ]
[; ;doprnt.c: 1140: exp = 0;
"1140
[e = _exp -> 0 `i ]
"1141
}
[e :U 44 ]
[; ;doprnt.c: 1141: }
[; ;doprnt.c: 1143: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
"1143
{
[e = _c -> -> 1 `i `c ]
[e $ != -> -> _c `i `ui / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui 45  ]
[e $U 46  ]
"1144
[e :U 45 ]
[; ;doprnt.c: 1144: if(_val._val < dpowers[c])
[e $ ! < . __val 0 *U + &U _dpowers * -> -> _c `uc `ux -> -> # *U &U _dpowers `ui `ux 48  ]
[; ;doprnt.c: 1145: break;
"1145
[e $U 46  ]
[e :U 48 ]
"1143
[e ++ _c -> -> 1 `i `c ]
[e $ != -> -> _c `i `ui / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui 45  ]
[e :U 46 ]
"1180
}
[; ;doprnt.c: 1180: {
{
[; ;doprnt.c: 1193: if(flag & 0x03)
"1193
[e $ ! != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 49  ]
[; ;doprnt.c: 1195: ((*sp++ = ('-')));
"1195
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 45 `ui `uc ]
[e :U 49 ]
"1200
}
[; ;doprnt.c: 1200: }
[; ;doprnt.c: 1201: while(c--) {
"1201
[e $U 50  ]
[e :U 51 ]
{
[; ;doprnt.c: 1205: ((*sp++ = ('0' + (_val._val/dpowers[c])%10)));
"1205
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> + -> -> 48 `ui `ul % / . __val 0 *U + &U _dpowers * -> -> _c `uc `ux -> -> # *U &U _dpowers `ui `ux -> -> -> 10 `i `l `ul `uc ]
"1207
}
[e :U 50 ]
"1201
[e $ != -> -- _c -> -> 1 `i `c `i -> -> -> 0 `i `c `i 51  ]
[e :U 52 ]
[; ;doprnt.c: 1207: }
[; ;doprnt.c: 1208: while(exp > 0) {
"1208
[e $U 53  ]
[e :U 54 ]
{
[; ;doprnt.c: 1209: ((*sp++ = ('0')));
"1209
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 48 `ui `uc ]
[; ;doprnt.c: 1210: exp--;
"1210
[e -- _exp -> 1 `i ]
"1211
}
[e :U 53 ]
"1208
[e $ > _exp -> 0 `i 54  ]
[e :U 55 ]
[; ;doprnt.c: 1211: }
[; ;doprnt.c: 1212: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
"1212
[e $ ! > _prec -> - / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui -> -> 2 `i `ui `i 56  ]
[; ;doprnt.c: 1213: c = (sizeof dpowers/sizeof dpowers[0])-2;
"1213
[e = _c -> - / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui -> -> 2 `i `ui `c ]
[e $U 57  ]
"1214
[e :U 56 ]
[; ;doprnt.c: 1214: else
[; ;doprnt.c: 1215: c = prec;
"1215
[e = _c -> _prec `c ]
[e :U 57 ]
[; ;doprnt.c: 1216: prec -= c;
"1216
[e =- _prec -> _c `i ]
[; ;doprnt.c: 1220: if(c)
"1220
[e $ ! != -> _c `i -> -> -> 0 `i `c `i 58  ]
[; ;doprnt.c: 1222: ((*sp++ = ('.')));
"1222
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 46 `ui `uc ]
[e :U 58 ]
[; ;doprnt.c: 1228: _val._val = (long)(fval * scale(c));
"1228
[e = . __val 0 -> -> * _fval ( _scale (1 _c `l `ul ]
[; ;doprnt.c: 1229: while(c--) {
"1229
[e $U 59  ]
[e :U 60 ]
{
[; ;doprnt.c: 1230: ((*sp++ = ('0' + (_val._val/dpowers[c])%10)));
"1230
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> + -> -> 48 `ui `ul % / . __val 0 *U + &U _dpowers * -> -> _c `uc `ux -> -> # *U &U _dpowers `ui `ux -> -> -> 10 `i `l `ul `uc ]
[; ;doprnt.c: 1231: _val._val %= dpowers[c];
"1231
[e =% . __val 0 *U + &U _dpowers * -> -> _c `uc `ux -> -> # *U &U _dpowers `ui `ux ]
"1232
}
[e :U 59 ]
"1229
[e $ != -> -- _c -> -> 1 `i `c `i -> -> -> 0 `i `c `i 60  ]
[e :U 61 ]
[; ;doprnt.c: 1232: }
[; ;doprnt.c: 1234: while(prec) {
"1234
[e $U 62  ]
[e :U 63 ]
{
[; ;doprnt.c: 1235: ((*sp++ = ('0')));
"1235
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 48 `ui `uc ]
[; ;doprnt.c: 1236: prec--;
"1236
[e -- _prec -> 1 `i ]
"1237
}
[e :U 62 ]
"1234
[e $ != _prec -> 0 `i 63  ]
[e :U 64 ]
[; ;doprnt.c: 1237: }
[; ;doprnt.c: 1244: continue;
"1244
[e $U 21  ]
"1245
}
[e :U 33 ]
[; ;doprnt.c: 1245: }
[; ;doprnt.c: 1252: {
"1252
{
[; ;doprnt.c: 1258: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
"1258
[e = . __val 0 -> -> *U -> ( ___va_arg , (. -> *U -> &U _ap `**i `*v -> 0 `i `*i `l `ul ]
[; ;doprnt.c: 1260: if((long)_val._val < 0) {
"1260
[e $ ! < -> . __val 0 `l -> -> 0 `i `l 65  ]
{
[; ;doprnt.c: 1261: flag |= 0x03;
"1261
[e =| _flag -> -> 3 `i `us ]
[; ;doprnt.c: 1262: _val._val = -_val._val;
"1262
[e = . __val 0 -U . __val 0 ]
"1263
}
[e :U 65 ]
"1265
}
[; ;doprnt.c: 1263: }
[; ;doprnt.c: 1265: }
[; ;doprnt.c: 1304: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
"1304
{
[e = _c -> -> 1 `i `c ]
[e $ != -> -> _c `i `ui / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui 66  ]
[e $U 67  ]
"1305
[e :U 66 ]
[; ;doprnt.c: 1305: if(_val._val < dpowers[c])
[e $ ! < . __val 0 *U + &U _dpowers * -> -> _c `uc `ux -> -> # *U &U _dpowers `ui `ux 69  ]
[; ;doprnt.c: 1306: break;
"1306
[e $U 67  ]
[e :U 69 ]
"1304
[e ++ _c -> -> 1 `i `c ]
[e $ != -> -> _c `i `ui / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui 66  ]
[e :U 67 ]
"1421
}
[; ;doprnt.c: 1421: {
{
[; ;doprnt.c: 1437: if(flag & 0x03)
"1437
[e $ ! != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 70  ]
[; ;doprnt.c: 1438: ((*sp++ = ('-')));
"1438
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 45 `ui `uc ]
[e :U 70 ]
"1468
}
[; ;doprnt.c: 1468: }
[; ;doprnt.c: 1471: prec = c;
"1471
[e = _prec -> _c `i ]
[; ;doprnt.c: 1473: while(prec--) {
"1473
[e $U 71  ]
[e :U 72 ]
{
[; ;doprnt.c: 1477: {
"1477
{
[; ;doprnt.c: 1488: c = (_val._val / dpowers[prec]) % 10 + '0';
"1488
[e = _c -> + % / . __val 0 *U + &U _dpowers * -> -> _prec `ui `ux -> -> # *U &U _dpowers `ui `ux -> -> -> 10 `i `l `ul -> -> 48 `ui `ul `c ]
"1519
}
[; ;doprnt.c: 1519: }
[; ;doprnt.c: 1520: ((*sp++ = (c)));
"1520
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> _c `uc ]
"1521
}
[e :U 71 ]
"1473
[e $ != -- _prec -> 1 `i -> 0 `i 72  ]
[e :U 73 ]
"1529
}
[e :U 21 ]
"544
[e $ != -> = _c -> *U ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x `c `i -> -> -> 0 `i `c `i 22  ]
[e :U 23 ]
[; ;doprnt.c: 1521: }
[; ;doprnt.c: 1529: }
[; ;doprnt.c: 1531: alldone:
"1531
[e :U 28 ]
[; ;doprnt.c: 1534: *sp = 0;
"1534
[e = *U _sp -> -> 0 `i `uc ]
[; ;doprnt.c: 1536: return 0;
"1536
[e ) -> 0 `i ]
[e $UE 20  ]
[; ;doprnt.c: 1537: }
"1537
[e :UE 20 ]
}
